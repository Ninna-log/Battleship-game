package com.mindhub.salvo;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.hibernate.annotations.GenericGenerator;
import static java.util.stream.Collectors.toList;
import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;

@Entity
public class Player {
    @Id // every @Entity/object from the class Player which is an arrow--->
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native") // will be identified by a unique ID
    @GenericGenerator(name = "native", strategy = "native") // generated by Spring
    private long id; // private variable only accessible by asking with a getter

    private String userName; // private variable only accessible by asking with a getter

    @OneToMany(mappedBy="player", fetch=FetchType.EAGER) // relation of one(Player) to many(gamePlayers)
    private Set<GamePlayer> gamePlayers = new HashSet<>();

    @OneToMany(mappedBy="player", fetch=FetchType.EAGER)
    private Set<Score> scores = new HashSet<>();

    @JsonIgnore
    public List<Game> getGame() {

        return gamePlayers.stream().map(player -> player.getGame()).collect(toList());
        //method to get a list of which games are associated with player class
    }

    public Score getScore(Game game) {
        return scores.stream().filter(score -> score.getGame().equals(game)).findFirst().orElse(null);
    }

    public Set<Score> getScores() {
        return scores;
    }

    public Player() { }
    //empty constructor used by hibernate

    public Player(String userName) {

        this.userName = userName;
    }

    public Set<GamePlayer> getGamePlayers() {
        return gamePlayers;
    }

    public String getUserName() {

        return userName;
    }

    public void setUserName(String userName) {

        this.userName = userName;
    }

    public void setId(long id) {

        this.id = id;
    }

    public long getId() {

        return id;
    }

    public void addGamePlayer(GamePlayer gamePlayer) {
        gamePlayer.setPlayer(this); //whatever gamePlayer object is created, is going to be added to the list
        gamePlayers.add(gamePlayer); // of gamePlayers as a new row in the DB
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Player player = (Player) o;
        return id == player.id &&
                Objects.equals(userName, player.userName);
    }

    @Override
    public int hashCode() {

        return Objects.hash(id, userName);
    }

    public GamePlayer getGamePlayer(GamePlayer gamePlayer) {
        return gamePlayer;
    }

}

