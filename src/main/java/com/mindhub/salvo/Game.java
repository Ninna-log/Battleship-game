package com.mindhub.salvo;

import org.hibernate.annotations.GenericGenerator;
import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.time.LocalDateTime;
import java.util.Set;
import static java.util.stream.Collectors.toList;

@Entity
public class Game {
    @Id // every @Entity/object from the class Game which is an arrow--->
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native") // will be identified by a unique ID
    @GenericGenerator(name = "native", strategy = "native") // generated by Spring
    private long id; // private variable only accessible by asking with a getter

    private LocalDateTime date; // private variable only accessible by asking with a getter

    @OneToMany(mappedBy="game", fetch=FetchType.EAGER) // relation of one(Game) to many(gamePlayers)
    Set<GamePlayer> gamePlayers = new HashSet<>();

    @OneToMany(mappedBy="game", fetch=FetchType.EAGER)
    Set<Score> scores = new HashSet<>();

    public List<Player> getPlayers() {

        return gamePlayers.stream().map(game -> game.getPlayer()).collect(toList());
        //method to get a list of which players are associated with game class
    }

    public Game() { }
    //empty constructor used by hibernate

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public void setGamePlayers(Set<GamePlayer> gamePlayers) {
        this.gamePlayers = gamePlayers;
    }

    public Set<Score> getScores() {
        return scores;
    }

    public void setScores(Set<Score> scores) {
        this.scores = scores;
    }

    public Game(LocalDateTime date) {  // A date is received

        this.date = date;
    }

    public Set<GamePlayer> getGamePlayers() {
        return gamePlayers;
    }

    public long getId() { // An ID is received

        return id;
    }

    public void setId(long id) {  // An ID is modified

        this.id = id;
    }

    public LocalDateTime getDate() {

        return date;
    }

    public void addGamePlayer(GamePlayer gamePlayer) {
        gamePlayer.setGame(this);     //whatever gamePlayer object is created, is going to be added to the list
        gamePlayers.add(gamePlayer); // of gamePlayers as a new row in the DB
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Game game = (Game) o;
        return id == game.id &&
                Objects.equals(date, game.date);
    }

    @Override
    public int hashCode() {

        return Objects.hash(id, date);
    }
}
